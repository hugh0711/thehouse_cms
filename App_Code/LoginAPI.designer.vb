'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="TheHouse_dev")>  _
Partial Public Class LoginAPIDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertLogin_Session(instance As Login_Session)
    End Sub
  Partial Private Sub UpdateLogin_Session(instance As Login_Session)
    End Sub
  Partial Private Sub DeleteLogin_Session(instance As Login_Session)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("MySqlConnection").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Login_Sessions() As System.Data.Linq.Table(Of Login_Session)
		Get
			Return Me.GetTable(Of Login_Session)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Login_Sessions")>  _
Partial Public Class Login_Session
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _sid As String
	
	Private _UserName As String
	
	Private _sessdata As String
	
	Private _timecreated As Long
	
	Private _timemodified As Long
	
	Private _firstip As String
	
	Private _lastip As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnsidChanging(value As String)
    End Sub
    Partial Private Sub OnsidChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnsessdataChanging(value As String)
    End Sub
    Partial Private Sub OnsessdataChanged()
    End Sub
    Partial Private Sub OntimecreatedChanging(value As Long)
    End Sub
    Partial Private Sub OntimecreatedChanged()
    End Sub
    Partial Private Sub OntimemodifiedChanging(value As Long)
    End Sub
    Partial Private Sub OntimemodifiedChanged()
    End Sub
    Partial Private Sub OnfirstipChanging(value As String)
    End Sub
    Partial Private Sub OnfirstipChanged()
    End Sub
    Partial Private Sub OnlastipChanging(value As String)
    End Sub
    Partial Private Sub OnlastipChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sid", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property sid() As String
		Get
			Return Me._sid
		End Get
		Set
			If (String.Equals(Me._sid, value) = false) Then
				Me.OnsidChanging(value)
				Me.SendPropertyChanging
				Me._sid = value
				Me.SendPropertyChanged("sid")
				Me.OnsidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sessdata", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property sessdata() As String
		Get
			Return Me._sessdata
		End Get
		Set
			If (String.Equals(Me._sessdata, value) = false) Then
				Me.OnsessdataChanging(value)
				Me.SendPropertyChanging
				Me._sessdata = value
				Me.SendPropertyChanged("sessdata")
				Me.OnsessdataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timecreated", DbType:="BigInt NOT NULL")>  _
	Public Property timecreated() As Long
		Get
			Return Me._timecreated
		End Get
		Set
			If ((Me._timecreated = value)  _
						= false) Then
				Me.OntimecreatedChanging(value)
				Me.SendPropertyChanging
				Me._timecreated = value
				Me.SendPropertyChanged("timecreated")
				Me.OntimecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timemodified", DbType:="BigInt NOT NULL")>  _
	Public Property timemodified() As Long
		Get
			Return Me._timemodified
		End Get
		Set
			If ((Me._timemodified = value)  _
						= false) Then
				Me.OntimemodifiedChanging(value)
				Me.SendPropertyChanging
				Me._timemodified = value
				Me.SendPropertyChanged("timemodified")
				Me.OntimemodifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstip", DbType:="NVarChar(45)")>  _
	Public Property firstip() As String
		Get
			Return Me._firstip
		End Get
		Set
			If (String.Equals(Me._firstip, value) = false) Then
				Me.OnfirstipChanging(value)
				Me.SendPropertyChanging
				Me._firstip = value
				Me.SendPropertyChanged("firstip")
				Me.OnfirstipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastip", DbType:="NVarChar(45)")>  _
	Public Property lastip() As String
		Get
			Return Me._lastip
		End Get
		Set
			If (String.Equals(Me._lastip, value) = false) Then
				Me.OnlastipChanging(value)
				Me.SendPropertyChanging
				Me._lastip = value
				Me.SendPropertyChanged("lastip")
				Me.OnlastipChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
